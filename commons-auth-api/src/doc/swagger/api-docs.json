{
  "swagger": "2.0",
  "info": {
    "description": "Handles authentication + authorization with registration- and password-reset flows.",
    "version": "2.2.0",
    "title": "commons-auth api",
    "contact": {
      "name": "rocketbase.io",
      "url": "https://www.rocketbase.io",
      "email": "info@rocketbase.io"
    }
  },
  "tags": [
    {
      "name": "admin",
      "description": "CRUD for user entities. Mainly used by users with admin rights."
    },
    {
      "name": "authentication",
      "description": "Used to authenticate and refresh a JWT-Token. Furthermore allows changes to current logged in user."
    },
    {
      "name": "forgot-password",
      "description": "Flow to request a password reset."
    },
    {
      "name": "registration",
      "description": "Flow to register a new user."
    },
    {
      "name": "validation",
      "description": "Allows to validate username, email, password in advance."
    }
  ],
  "paths": {
    "/api/user": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "find",
        "description": "page thew users-list with optional filter parameters.",
        "operationId": "findUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "default 25 max is 200",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page",
            "in": "query",
            "description": "default is 1",
            "required": false,
            "type": "string"
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "firstName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageableResult-AppUserRead"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "create",
        "description": "create a new user threw admin-rights. normal flow is disabled.",
        "operationId": "createUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "create",
            "description": "create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppUserCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AppUserRead"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/user/{id}": {
      "patch": {
        "tags": [
          "admin"
        ],
        "summary": "patch",
        "description": "allows to update only parts of an user without sending the hole object.",
        "operationId": "patchUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "update",
            "description": "update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppUserUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AppUserRead"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "delete",
        "description": "remove a user from database.",
        "operationId": "deleteUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "login",
        "description": "login user via username and password.",
        "operationId": "loginUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "login",
            "description": "login",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LoginResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/auth/me": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "current logged in",
        "description": "get user entity of current logged in user.",
        "operationId": "getAuthenticatedUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AppUserRead"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/auth/refresh": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "get new access-token",
        "description": "generates a new access-token with given valid refresh-token.",
        "operationId": "refreshTokenUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Needs the refresh-token in header instead of access-token."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/auth/change-password": {
      "put": {
        "tags": [
          "authentication"
        ],
        "summary": "change password",
        "description": "change password of logged in user",
        "operationId": "changePasswordUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "passwordChange",
            "description": "passwordChange",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordChangeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "registration"
        ],
        "summary": "register",
        "description": "request a registration with given username, email...",
        "operationId": "registerUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "registration",
            "description": "registration",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegistrationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AppUserRead"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/auth/forgot-password": {
      "put": {
        "tags": [
          "forgot-password"
        ],
        "summary": "request password reset",
        "description": "request a password reset.",
        "operationId": "forgotPasswordUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "forgotPassword",
            "description": "forgotPassword",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ForgotPasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/auth/reset-password": {
      "put": {
        "tags": [
          "forgot-password"
        ],
        "summary": "rest password",
        "description": "perform password-change with given verification-token.",
        "operationId": "resetPasswordUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "performPasswordReset",
            "description": "performPasswordReset",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PerformPasswordResetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/auth/update-profile": {
      "put": {
        "tags": [
          "authentication"
        ],
        "summary": "update profile",
        "description": "logged in user can change his profile information.",
        "operationId": "updateProfileUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "updateProfile",
            "description": "updateProfile",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProfileRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/auth/validate/email": {
      "post": {
        "tags": [
          "validation"
        ],
        "summary": "validateEmail",
        "description": "allow to validate email in advance for registration etc.",
        "operationId": "validateEmailUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "email",
            "description": "email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ValidationResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/auth/validate/password": {
      "post": {
        "tags": [
          "validation"
        ],
        "summary": "validatePassword",
        "description": "allow to validate password in advance for registration etc.",
        "operationId": "validatePasswordUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "password",
            "description": "password",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ValidationResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/auth/validate/token": {
      "post": {
        "tags": [
          "validation"
        ],
        "summary": "validateToken",
        "description": "allow to validate token and check's if expired",
        "operationId": "validateTokenUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "token",
            "description": "token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ValidationResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/auth/validate/username": {
      "post": {
        "tags": [
          "validation"
        ],
        "summary": "validateUsername",
        "description": "allow to validate username in advance for registration etc.",
        "operationId": "validateUsernameUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "username",
            "description": "username",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ValidationResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/auth/verify": {
      "get": {
        "tags": [
          "registration"
        ],
        "summary": "registration verification",
        "description": "when registration flow with email-verification is enabled user. This endpoint needs to get triggerd to verify.",
        "operationId": "verifyUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "verification",
            "in": "query",
            "description": "verification",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JwtTokenBundle"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "AppUserCreate": {
      "type": "object",
      "properties": {
        "admin": {
          "type": "boolean"
        },
        "avatar": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "firstName": {
          "type": "string"
        },
        "keyValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "lastName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "title": "AppUserCreate"
    },
    "AppUserRead": {
      "type": "object",
      "properties": {
        "avatar": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "keyValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "lastLogin": {
          "type": "string",
          "format": "date-time"
        },
        "lastName": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "username": {
          "type": "string"
        }
      },
      "title": "AppUserRead"
    },
    "AppUserUpdate": {
      "type": "object",
      "properties": {
        "avatar": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "firstName": {
          "type": "string"
        },
        "keyValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "lastName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "AppUserUpdate"
    },
    "ForgotPasswordRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "title": "ForgotPasswordRequest"
    },
    "JwtTokenBundle": {
      "type": "object",
      "properties": {
        "refreshToken": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      },
      "title": "JwtTokenBundle"
    },
    "LoginRequest": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "title": "LoginRequest"
    },
    "LoginResponse": {
      "type": "object",
      "properties": {
        "jwtTokenBundle": {
          "$ref": "#/definitions/JwtTokenBundle"
        },
        "user": {
          "$ref": "#/definitions/AppUserRead"
        }
      },
      "title": "LoginResponse"
    },
    "PageableResult-AppUserRead": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppUserRead"
          }
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageableResult-AppUserRead"
    },
    "PasswordChangeRequest": {
      "type": "object",
      "properties": {
        "currentPassword": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      },
      "title": "PasswordChangeRequest"
    },
    "PerformPasswordResetRequest": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string"
        },
        "verification": {
          "type": "string"
        }
      },
      "title": "PerformPasswordResetRequest"
    },
    "RegistrationRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "keyValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "lastName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "title": "RegistrationRequest"
    },
    "UpdateProfileRequest": {
      "type": "object",
      "properties": {
        "avatar": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "keyValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "lastName": {
          "type": "string"
        }
      },
      "title": "UpdateProfileRequest"
    },
    "ValidationResponse": {
      "type": "object",
      "properties": {
        "errorCodes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ALREADY_TAKEN",
              "INVALID"
            ]
          }
        },
        "valid": {
          "type": "boolean"
        }
      },
      "title": "ValidationResponse"
    }
  }
}